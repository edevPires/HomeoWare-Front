/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RefreshPasswordRouteImport } from './routes/refresh-password'
import { Route as LoginRouteImport } from './routes/login'
import { Route as HubRouteImport } from './routes/hub'
import { Route as ForgotPasswordRouteImport } from './routes/forgot-password'
import { Route as IndexRouteImport } from './routes/index'
import { Route as HubIndexRouteImport } from './routes/hub/index'
import { Route as HubEstoqueRouteImport } from './routes/hub/estoque'
import { Route as HubCadastrosRouteImport } from './routes/hub/cadastros'

const RefreshPasswordRoute = RefreshPasswordRouteImport.update({
  id: '/refresh-password',
  path: '/refresh-password',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const HubRoute = HubRouteImport.update({
  id: '/hub',
  path: '/hub',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotPasswordRoute = ForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HubIndexRoute = HubIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HubRoute,
} as any)
const HubEstoqueRoute = HubEstoqueRouteImport.update({
  id: '/estoque',
  path: '/estoque',
  getParentRoute: () => HubRoute,
} as any)
const HubCadastrosRoute = HubCadastrosRouteImport.update({
  id: '/cadastros',
  path: '/cadastros',
  getParentRoute: () => HubRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/hub': typeof HubRouteWithChildren
  '/login': typeof LoginRoute
  '/refresh-password': typeof RefreshPasswordRoute
  '/hub/cadastros': typeof HubCadastrosRoute
  '/hub/estoque': typeof HubEstoqueRoute
  '/hub/': typeof HubIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/refresh-password': typeof RefreshPasswordRoute
  '/hub/cadastros': typeof HubCadastrosRoute
  '/hub/estoque': typeof HubEstoqueRoute
  '/hub': typeof HubIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/hub': typeof HubRouteWithChildren
  '/login': typeof LoginRoute
  '/refresh-password': typeof RefreshPasswordRoute
  '/hub/cadastros': typeof HubCadastrosRoute
  '/hub/estoque': typeof HubEstoqueRoute
  '/hub/': typeof HubIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forgot-password'
    | '/hub'
    | '/login'
    | '/refresh-password'
    | '/hub/cadastros'
    | '/hub/estoque'
    | '/hub/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/refresh-password'
    | '/hub/cadastros'
    | '/hub/estoque'
    | '/hub'
  id:
    | '__root__'
    | '/'
    | '/forgot-password'
    | '/hub'
    | '/login'
    | '/refresh-password'
    | '/hub/cadastros'
    | '/hub/estoque'
    | '/hub/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  HubRoute: typeof HubRouteWithChildren
  LoginRoute: typeof LoginRoute
  RefreshPasswordRoute: typeof RefreshPasswordRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/refresh-password': {
      id: '/refresh-password'
      path: '/refresh-password'
      fullPath: '/refresh-password'
      preLoaderRoute: typeof RefreshPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/hub': {
      id: '/hub'
      path: '/hub'
      fullPath: '/hub'
      preLoaderRoute: typeof HubRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/hub/': {
      id: '/hub/'
      path: '/'
      fullPath: '/hub/'
      preLoaderRoute: typeof HubIndexRouteImport
      parentRoute: typeof HubRoute
    }
    '/hub/estoque': {
      id: '/hub/estoque'
      path: '/estoque'
      fullPath: '/hub/estoque'
      preLoaderRoute: typeof HubEstoqueRouteImport
      parentRoute: typeof HubRoute
    }
    '/hub/cadastros': {
      id: '/hub/cadastros'
      path: '/cadastros'
      fullPath: '/hub/cadastros'
      preLoaderRoute: typeof HubCadastrosRouteImport
      parentRoute: typeof HubRoute
    }
  }
}

interface HubRouteChildren {
  HubCadastrosRoute: typeof HubCadastrosRoute
  HubEstoqueRoute: typeof HubEstoqueRoute
  HubIndexRoute: typeof HubIndexRoute
}

const HubRouteChildren: HubRouteChildren = {
  HubCadastrosRoute: HubCadastrosRoute,
  HubEstoqueRoute: HubEstoqueRoute,
  HubIndexRoute: HubIndexRoute,
}

const HubRouteWithChildren = HubRoute._addFileChildren(HubRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  HubRoute: HubRouteWithChildren,
  LoginRoute: LoginRoute,
  RefreshPasswordRoute: RefreshPasswordRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
